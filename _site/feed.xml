<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-06-08T21:38:20+03:00</updated><id>http://localhost:4000//</id><title type="html">full stack engineer</title><subtitle></subtitle><entry><title type="html">deploy php app with heroku</title><link href="http://localhost:4000/jekyll/update/2017/03/26/deploy-php-app-with-heroku.html" rel="alternate" type="text/html" title="deploy php app with heroku" /><published>2017-03-26T17:13:40+03:00</published><updated>2017-03-26T17:13:40+03:00</updated><id>http://localhost:4000/jekyll/update/2017/03/26/deploy%20php%20app%20with%20heroku</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/03/26/deploy-php-app-with-heroku.html">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew tap homebrew/services&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install homebrew/php/php71 --with-postgresql&lt;/code&gt; &lt;strong&gt;=&amp;gt;&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;brew options php71&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install composer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install heroku&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;heroku login
git clone https://github.com/heroku/php-getting-started.git
cd php-getting-started.git
heroku create
git push heroku master
heroku open
heroku logs --tail
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;https://devcenter.heroku.com/articles/getting-started-with-php#define-a-procfile&lt;/p&gt;</content><author><name>Tuncay UYSAL</name></author><summary type="html">brew tap homebrew/services</summary></entry><entry><title type="html">logging layer</title><link href="http://localhost:4000/jekyll/update/2017/02/09/logging-layer.html" rel="alternate" type="text/html" title="logging layer" /><published>2017-02-09T17:03:32+03:00</published><updated>2017-02-09T17:03:32+03:00</updated><id>http://localhost:4000/jekyll/update/2017/02/09/logging-layer</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/02/09/logging-layer.html">&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;step-one&quot;&gt;Step One&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;be ready for pre-installation previously&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;nano /etc/syslog.conf
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;                     @127.0.0.1:5000
sudo killall -HUP syslogd&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;however&lt;/strong&gt; i’ll make catch system events with &lt;code class=&quot;highlighter-rouge&quot;&gt;collectd&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install collectd
nano /usr/local/Cellar/collectd/5.7.1/etc/collectd.conf

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;step-two&quot;&gt;Step Two&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;brew install elasticsearch logstash kibana&lt;/p&gt;

&lt;p&gt;list of caveats&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;Data:    /usr/local/var/elasticsearch/elasticsearch_Tuncay/
Logs:    /usr/local/var/log/elasticsearch/elasticsearch_Tuncay.log
Plugins: /usr/local/opt/elasticsearch/libexec/plugins/
Config:  /usr/local/etc/elasticsearch/
plugin script: /usr/local/opt/elasticsearch/libexec/bin/elasticsearch-plugin

To have launchd start elasticsearch now and restart at login:
  brew services start elasticsearch
Or, if you don't want/need a background service you can just run:
  elasticsearch

Please read the getting started guide located at:
  https://www.elastic.co/guide/en/logstash/current/getting-started-with-logstash.html

Config: /usr/local/etc/kibana/
If you wish to preserve your plugins upon upgrade, make a copy of
/usr/local/opt/kibana/plugins before upgrading, and copy it into the
new keg location after upgrading.

To have launchd start kibana now and restart at login:
  brew services start kibana
Or, if you don't want/need a background service you can just run:
  kibana


you can take info anytime =&amp;gt; brew info package&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;step-three&quot;&gt;Step Three&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;start of services&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logstash -f /Users/Tuncay/Amazon Drive/logstash.conf&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;input {
    udp {
        port =&amp;gt; 5000
        type =&amp;gt; syslog
    }
}


filter {
    if [type] == &quot;syslog&quot; {
        grok {
            match =&amp;gt; { &quot;message&quot; =&amp;gt; &quot;%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}&quot; }
            add_field =&amp;gt; [ &quot;received_at&quot;, &quot;%{@timestamp}&quot; ]
            add_field =&amp;gt; [ &quot;received_from&quot;, &quot;%{host}&quot; ]
        }
        syslog_pri { }
        date {
            match =&amp;gt; [ &quot;syslog_timestamp&quot;, &quot;MMM  d HH:mm:ss&quot;, &quot;MMM dd HH:mm:ss&quot; ]
        }
    }
}


output {
    elasticsearch { 
      hosts =&amp;gt; [&quot;localhost:9200&quot;] 
    }
}&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;tricks&quot;&gt;Tricks&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;SYSTEM LOG FILES&lt;/dt&gt;
  &lt;dd&gt;&lt;strong&gt;Main folder:&lt;/strong&gt; /var/log/&lt;/dd&gt;
  &lt;dd&gt;&lt;strong&gt;Apple System Log:&lt;/strong&gt; /var/log/asl/&lt;/dd&gt;
  &lt;dd&gt;&lt;strong&gt;Audit Log:&lt;/strong&gt; /var/audit/&lt;/dd&gt;
  &lt;dd&gt;&lt;strong&gt;User Logs:&lt;/strong&gt; ~/Library/Logs/&lt;/dd&gt;
  &lt;dd&gt;&lt;strong&gt;Application Logs:&lt;/strong&gt; /Library/Logs/&lt;/dd&gt;
&lt;/dl&gt;

&lt;hr /&gt;

&lt;p&gt;for &lt;a href=&quot;http://macadmins.psu.edu/wp-content/uploads/sites/24696/2016/06/psumac2016-19-osxlogs_macadmins_2016.pdf&quot;&gt;reference&lt;/a&gt; and &lt;a href=&quot;https://stackify.com/best-log-management-tools/&quot;&gt;list of tools&lt;/a&gt;&lt;/p&gt;</content><author><name>Tuncay UYSAL</name></author><summary type="html">Step One</summary></entry><entry><title type="html">rtm netdata</title><link href="http://localhost:4000/jekyll/update/2017/01/25/netdata.html" rel="alternate" type="text/html" title="rtm netdata" /><published>2017-01-25T11:41:59+03:00</published><updated>2017-01-25T11:41:59+03:00</updated><id>http://localhost:4000/jekyll/update/2017/01/25/netdata</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/01/25/netdata.html">&lt;blockquote&gt;
  &lt;p&gt;i’ll share beauty &amp;amp; modern real time monitoring tool..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;for mac osx&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#install required packages
brew install ossp-uuid autoconf automake pkg-config

#download
git clone https://github.com/firehol/netdata.git

#install
sudo ./netdata-installer.sh --install ~/opt

localhost:19999

cd ~/opt/netdata &amp;amp;&amp;amp; tree -a

ln -s  ~/opt/netdata/usr/sbin/netdata /usr/local/bin/
    killall netdata
    pidof netdata
    netdata&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;for linux&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;curl -Ss 'https://raw.githubusercontent.com/firehol/netdata-demo-site/master/install-required-packages.sh' &amp;gt;/tmp/kickstart.sh &amp;amp;&amp;amp; bash /tmp/kickstart.sh -i netdata-all

git clone https://github.com/firehol/netdata.git --depth=1

cd netdata

sudo ./netdata-installer.sh

   - the daemon    at /usr/sbin/netdata
   - config files  at /etc/netdata
   - web files     at /usr/share/netdata
   - plugins       at /usr/libexec/netdata
   - cache files   at /var/cache/netdata
   - db files      at /var/lib/netdata
   - log files     at /var/log/netdata
   - pid file      at /var/run



http://127.0.0.1:19999/netdata.conf &amp;gt; for configuration (for keeping more history data etc.)

http://your.netdata:19999/tv.html

netdata -h command list&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/firehol/netdata/releases&quot;&gt;release-page&lt;/a&gt; for more info..&lt;/p&gt;</content><author><name>Tuncay UYSAL</name></author><summary type="html">i’ll share beauty &amp;amp; modern real time monitoring tool..</summary></entry><entry><title type="html">clear up cache of spotify for osx</title><link href="http://localhost:4000/jekyll/update/2017/01/24/clear-up-cache-of-spotify.html" rel="alternate" type="text/html" title="clear up cache of spotify for osx" /><published>2017-01-24T01:15:52+03:00</published><updated>2017-01-24T01:15:52+03:00</updated><id>http://localhost:4000/jekyll/update/2017/01/24/clear%20up%20cache%20of%20spotify</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/01/24/clear-up-cache-of-spotify.html">&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;find &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/Library/Caches/com.spotify.client/Data -type f -name &lt;span class=&quot;s2&quot;&gt;&quot;*.*&quot;&lt;/span&gt; -size +1k -exec &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt; -exec rm -rf &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;usefully tool “ncdu” for all disk space.&lt;/p&gt;

&lt;p&gt;#other way verbose rm -rfv&lt;/p&gt;

&lt;p&gt;also you can add on cronjob&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;➜  ~ crontab -l
&lt;span class=&quot;c&quot;&gt;#forspotify&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;MAILTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mail@tuncayuysal.com&quot;&lt;/span&gt;
0 22 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 1-5 find &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/Library/Caches/com.spotify.client/Data -type f -name &lt;span class=&quot;s2&quot;&gt;&quot;*.*&quot;&lt;/span&gt; -size +1k -exec &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt; -exec rm -rf &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt; &amp;gt; 1&amp;gt;/dev/null&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Tuncay UYSAL</name></author><summary type="html">find $HOME/Library/Caches/com.spotify.client/Data -type f -name &quot;*.*&quot; -size +1k -exec echo {} \; -exec rm -rf {} \;</summary></entry><entry><title type="html">vagrant manage keyless</title><link href="http://localhost:4000/jekyll/update/2017/01/23/vagrant-manage-to-keyless.html" rel="alternate" type="text/html" title="vagrant manage keyless" /><published>2017-01-23T18:19:25+03:00</published><updated>2017-01-23T18:19:25+03:00</updated><id>http://localhost:4000/jekyll/update/2017/01/23/vagrant-manage-to-keyless</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/01/23/vagrant-manage-to-keyless.html">&lt;p&gt;sudo visudo&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# Cmnd alias
Cmnd_Alias VAGRANT_HOSTS = /bin/cp /Users/Tuncay/.vagrant.d/tmp/hosts.local /etc/hosts
# User privilege
%sudo ALL=(root) NOPASSWD: VAGRANT_HOSTS&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;_ vagrant up&lt;/p&gt;

&lt;p&gt;#trick
for sudo style &lt;code class=&quot;highlighter-rouge&quot;&gt;alias _=&quot;sudo&quot;&lt;/code&gt; add in your shell profile..&lt;/p&gt;

&lt;p&gt;if you don’t want to enter a password for sudo always..
&lt;code class=&quot;highlighter-rouge&quot;&gt;Tuncay ALL=(ALL) NOPASSWD:ALL&lt;/code&gt;&lt;/p&gt;</content><author><name>Tuncay UYSAL</name></author><summary type="html">sudo visudo</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2017/01/23/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-01-23T15:02:34+03:00</published><updated>2017-01-23T15:02:34+03:00</updated><id>http://localhost:4000/jekyll/update/2017/01/23/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/01/23/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>Tuncay UYSAL</name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>
